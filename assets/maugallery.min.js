(function (t) {
  (t.fn.mauGallery = function (a) {
    a = t.extend(t.fn.mauGallery.defaults, a);
    var e = [];
    return this.each(function () {
      t.fn.mauGallery.methods.createRowWrapper(t(this)),
        a.lightBox &&
          t.fn.mauGallery.methods.createLightBox(
            t(this),
            a.lightboxId,
            a.navigation
          ),
        t.fn.mauGallery.listeners(a),
        t(this)
          .children(".gallery-item")
          .each(function (l) {
            t.fn.mauGallery.methods.responsiveImageItem(t(this)),
              t.fn.mauGallery.methods.moveItemInRowWrapper(t(this)),
              t.fn.mauGallery.methods.wrapItemInColumn(t(this), a.columns);
            var s = t(this).data("gallery-tag");
            a.showTags && void 0 !== s && -1 === e.indexOf(s) && e.push(s);
          }),
        a.showTags &&
          t.fn.mauGallery.methods.showItemTags(t(this), a.tagsPosition, e),
        t(this).fadeIn(500);
    });
  }),
    (t.fn.mauGallery.defaults = {
      columns: 3,
      lightBox: !0,
      lightboxId: null,
      showTags: !0,
      tagsPosition: "bottom",
      navigation: !0,
    }),
    (t.fn.mauGallery.listeners = function (a) {
      t(".gallery-item").on("click", function () {
        a.lightBox &&
          "IMG" === t(this).prop("tagName") &&
          t.fn.mauGallery.methods.openLightBox(t(this), a.lightboxId);
      }),
        t(".gallery").on(
          "click",
          ".nav-link",
          t.fn.mauGallery.methods.filterByTag
        ),
        t("body").on("click", ".mg-prev", () =>
          t.fn.mauGallery.methods.prevImage(a.lightboxId)
        ),
        t("body").on("click", ".mg-next", () =>
          t.fn.mauGallery.methods.nextImage(a.lightboxId)
        );
    }),
    (t.fn.mauGallery.methods = {
      createRowWrapper(t) {
        t.children().first().hasClass("row") ||
          t.append('<div class="gallery-items-row row"></div>');
      },
      wrapItemInColumn(t, a) {
        if (a.constructor === Number)
          t.wrap(
            `<div class='item-column mb-4 col-${Math.ceil(12 / a)}'></div>`
          );
        else if (a.constructor === Object) {
          var e = "";
          a.xs && (e += ` col-${Math.ceil(12 / a.xs)}`),
            a.sm && (e += ` col-sm-${Math.ceil(12 / a.sm)}`),
            a.md && (e += ` col-md-${Math.ceil(12 / a.md)}`),
            a.lg && (e += ` col-lg-${Math.ceil(12 / a.lg)}`),
            a.xl && (e += ` col-xl-${Math.ceil(12 / a.xl)}`),
            t.wrap(`<div class='item-column mb-4${e}'></div>`);
        } else
          console.error(
            `Columns should be defined as numbers or objects. ${typeof a} is not supported.`
          );
      },
      moveItemInRowWrapper(t) {
        t.appendTo(".gallery-items-row");
      },
      responsiveImageItem(t) {
        "IMG" === t.prop("tagName") && t.addClass("img-fluid");
      },
      openLightBox(t, a) {
        const e = document.getElementById(a);
        if (!e) return;
        const l = e.querySelector(".lightboxImage");
        l && (l.src = t.attr("src"));
        const s = new bootstrap.Modal(e);
        s.toggle();
      },
      prevImage() {
        let a = null;
        t("img.gallery-item").each(function () {
          t(this).attr("src") === t(".lightboxImage").attr("src") &&
            (a = t(this));
        });
        let e = t(".tags-bar span.active-tag").data("images-toggle"),
          l = [];
        t(".item-column").each(function () {
          let a = t(this).children("img");
          !a.length ||
            ("all" !== e && a.data("gallery-tag") !== e) ||
            l.push(a);
        });
        let s = l.findIndex((t) => t.attr("src") === a.attr("src")),
          i = (s - 1 + l.length) % l.length;
        t(".lightboxImage").attr("src", l[i].attr("src"));
      },
      nextImage() {
        let a = null;
        t("img.gallery-item").each(function () {
          t(this).attr("src") === t(".lightboxImage").attr("src") &&
            (a = t(this));
        });
        let e = t(".tags-bar span.active-tag").data("images-toggle"),
          l = [];
        t(".item-column").each(function () {
          let a = t(this).children("img");
          !a.length ||
            ("all" !== e && a.data("gallery-tag") !== e) ||
            l.push(a);
        });
        let s = l.findIndex((t) => t.attr("src") === a.attr("src")),
          i = (s + 1) % l.length;
        t(".lightboxImage").attr("src", l[i].attr("src"));
      },
      createLightBox(t, a, e) {
        t.append(
          `<div class="modal fade" id="${
            a || "galleryLightbox"
          }" tabindex="-1" role="dialog" aria-hidden="true">\n                <div class="modal-dialog" role="document">\n                    <div class="modal-content">\n                        <div class="modal-body">\n                            ${
            e
              ? '<div class="mg-prev" style="cursor:pointer;position:absolute;top:50%;left:-15px;background:white;"><</div>'
              : '<span style="display:none;" />'
          }\n                            <img class="lightboxImage img-fluid" alt="Contenu de l'image affichÃ©e dans la modale au clique"/>\n                            ${
            e
              ? '<div class="mg-next" style="cursor:pointer;position:absolute;top:50%;right:-15px;background:white;}">></div>'
              : '<span style="display:none;" />'
          }\n                        </div>\n                    </div>\n                </div>\n            </div>`
        );
      },
      showItemTags(a, e, l) {
        var s =
          '<li class="nav-item"><span class="nav-link active active-tag"  data-images-toggle="all">Tous</span></li>';
        t.each(l, function (t, a) {
          s += `<li class="nav-item active">\n                <span class="nav-link"  data-images-toggle="${a}">${a}</span></li>`;
        });
        var i = `<ul class="my-4 tags-bar nav nav-pills">${s}</ul>`;
        "bottom" === e
          ? a.append(i)
          : "top" === e
          ? a.prepend(i)
          : console.error(`Unknown tags position: ${e}`);
      },
      filterByTag() {
        if (t(this).hasClass("active-tag")) return;
        t(".tags-bar .nav-link").removeClass("active active-tag"),
          t(this).addClass("active active-tag");
        const a = t(this).data("images-toggle");
        t(".gallery-item").each(function () {
          const e = t(this).closest(".item-column");
          e.hide(),
            ("all" !== a && t(this).data("gallery-tag") !== a) || e.show();
        });
      },
    });
})(jQuery);
